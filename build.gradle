buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
        maven { url 'https://modmaven.dev/' }

    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'maven-publish'


version = '0.0.0.0'
group = 'com.rumaruka.techicka' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'techicka'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {

    mappings channel: 'parchment', version: '2022.07.10-1.18.2'


    runs {
        client {
            workingDirectory project.file('run')


            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'techicka'
            //Mixin-required properties and arg (3)
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', file('build/createSrgToMcp/output.srg')
            arg '-mixin.config=mixins.techicka.json'
            mods {
                techicka {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'
//Mixin-required properties and arg (3)
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', file('build/createSrgToMcp/output.srg')
            arg '-mixin.config=mixins.techicka.json'
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'techicka'

            mods {
                techicka {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'
//Mixin-required properties and arg (3)
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', file('build/createSrgToMcp/output.srg')
            arg '-mixin.config=mixins.techicka.json'
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'techicka'

            mods {
                techicka {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
//Mixin-required properties and arg (3)
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', file('build/createSrgToMcp/output.srg')
            arg '-mixin.config=mixins.techicka.json'
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'techicka', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                techicka {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    maven {
        url "https://maven.blamejared.com"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven { // TOP
        url "https://maven.k-4u.nl"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven{
        name = "Spongepowered"
        url = "https://repo.spongepowered.org/maven"
    }
    jcenter()
    mavenCentral()
    mavenLocal()
}

dependencies {

    minecraft 'net.minecraftforge:forge:1.18.2-40.1.60'

    compileOnly fg.deobf("vazkii.botania:Botania:${botania_version}:api")
    compileOnly fg.deobf("vazkii.botania:Botania:${botania_version}")
    runtimeOnly fg.deobf("vazkii.botania:Botania:${botania_version}")

    implementation fg.deobf("curse.maven:ars-nouveau-401955:3871318")

    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.18:3.0.28')

    implementation fg.deobf("curse.maven:cofh-core-69162:${cofh_core_file}")
    implementation fg.deobf("curse.maven:thermal-foundation-222880:${thermal_foundation_file}")
    implementation fg.deobf("curse.maven:thermal-expansion-69163:${thermal_expansion_file}")
    implementation fg.deobf("curse.maven:thermal-cultivation-271835:${thermal_cultivation_file}")
    implementation fg.deobf("curse.maven:thermal-locomotion-406959:${thermal_locomotion_file}")
    implementation fg.deobf("curse.maven:thermal-innovation-291737:${thermal_innovation_file}")

 //  compileOnly "mekanism:Mekanism:${mekanism_version}:api"

    implementation fg.deobf("mekanism:Mekanism:${mekanism_version}")// core
    implementation fg.deobf("mekanism:Mekanism:${mekanism_version}:additions")// Mekanism: Additions
    implementation fg.deobf("mekanism:Mekanism:${mekanism_version}:generators")// Mekanism: Generators
    implementation fg.deobf("mekanism:Mekanism:${mekanism_version}:tools")// Mekanism: Tools

    implementation fg.deobf("curse.maven:blood-magic-224791:${blood_magic_file}")

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.18.2-71.1:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.18.2-71.1")

    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.18.2-5.0.7.1:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.18.2-5.0.7.1")
    //JEI
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
    implementation fg.deobf(project.dependencies.create("mcjty.theoneprobe:theoneprobe:1.18-5.1.0-8") { transitive = false })


    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "techicka",
                "Specification-Vendor"    : "techickasareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Rumaruka",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "mixins.techicka.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')
mixin {

    add sourceSets.main, 'mixins.techicka.refmap.json'

}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
